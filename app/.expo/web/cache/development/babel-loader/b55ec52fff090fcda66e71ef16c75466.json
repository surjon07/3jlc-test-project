{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _hammerjs = _interopRequireDefault(require(\"@egjs/hammerjs\"));\n\nvar _constants = require(\"./constants\");\n\nvar _Errors = require(\"./Errors\");\n\nvar _DraggingGestureHandler = _interopRequireDefault(require(\"./DraggingGestureHandler\"));\n\nvar _utils = require(\"./utils\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar FlingGestureHandler = function (_DraggingGestureHandl) {\n  (0, _inherits2.default)(FlingGestureHandler, _DraggingGestureHandl);\n\n  var _super = _createSuper(FlingGestureHandler);\n\n  function FlingGestureHandler() {\n    (0, _classCallCheck2.default)(this, FlingGestureHandler);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(FlingGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'swipe';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return _hammerjs.default.Swipe;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(event) {\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: _hammerjs.default.INPUT_MOVE,\n        isFinal: false,\n        isFirst: true\n      }));\n      this.isGestureRunning = false;\n      this.hasGestureFailed = false;\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: _hammerjs.default.INPUT_END,\n        isFinal: true\n      }));\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n\n      (0, _get2.default)((0, _getPrototypeOf2.default)(FlingGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (this.hasGestureFailed) {\n        return;\n      }\n\n      if (ev.isFinal) {\n        setTimeout(function () {\n          if (_this.isGestureRunning) {\n            _this.cancelEvent(ev);\n          }\n        });\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var gesture = this.hammer.get(this.name);\n\n        if (gesture.options.enable(gesture, ev)) {\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return {\n        pointers: this.config.numberOfPointers,\n        direction: this.getDirection()\n      };\n    }\n  }, {\n    key: \"getTargetDirections\",\n    value: function getTargetDirections(direction) {\n      var directions = [];\n\n      if (direction & _constants.Direction.RIGHT) {\n        directions.push(_hammerjs.default.DIRECTION_RIGHT);\n      }\n\n      if (direction & _constants.Direction.LEFT) {\n        directions.push(_hammerjs.default.DIRECTION_LEFT);\n      }\n\n      if (direction & _constants.Direction.UP) {\n        directions.push(_hammerjs.default.DIRECTION_UP);\n      }\n\n      if (direction & _constants.Direction.DOWN) {\n        directions.push(_hammerjs.default.DIRECTION_DOWN);\n      }\n\n      return directions;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var _this$getConfig = this.getConfig(),\n          direction = _this$getConfig.direction;\n\n      var directions = [];\n\n      if (direction & _constants.Direction.RIGHT) {\n        directions.push(_hammerjs.default.DIRECTION_HORIZONTAL);\n      }\n\n      if (direction & _constants.Direction.LEFT) {\n        directions.push(_hammerjs.default.DIRECTION_HORIZONTAL);\n      }\n\n      if (direction & _constants.Direction.UP) {\n        directions.push(_hammerjs.default.DIRECTION_VERTICAL);\n      }\n\n      if (direction & _constants.Direction.DOWN) {\n        directions.push(_hammerjs.default.DIRECTION_VERTICAL);\n      }\n\n      directions = (0, _toConsumableArray2.default)(new Set(directions));\n      if (directions.length === 0) return _hammerjs.default.DIRECTION_NONE;\n      if (directions.length === 1) return directions[0];\n      return _hammerjs.default.DIRECTION_ALL;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref, _recognizer, _ref2) {\n      var numberOfPointers = _ref.numberOfPointers;\n      var pointerLength = _ref2.maxPointers;\n      var validPointerCount = pointerLength === numberOfPointers;\n\n      if (!validPointerCount && this.isGestureRunning) {\n        return {\n          failed: true\n        };\n      }\n\n      return {\n        success: validPointerCount\n      };\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref3) {\n      var _ref3$numberOfPointer = _ref3.numberOfPointers,\n          numberOfPointers = _ref3$numberOfPointer === void 0 ? 1 : _ref3$numberOfPointer,\n          direction = _ref3.direction,\n          props = (0, _objectWithoutProperties2.default)(_ref3, [\"numberOfPointers\", \"direction\"]);\n\n      if ((0, _utils.isnan)(direction) || typeof direction !== 'number') {\n        throw new _Errors.GesturePropError('direction', direction, 'number');\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(FlingGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        numberOfPointers: numberOfPointers,\n        direction: direction\n      }, props));\n    }\n  }]);\n  return FlingGestureHandler;\n}(_DraggingGestureHandler.default);\n\nvar _default = FlingGestureHandler;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/John Ray/Desktop/3jlc-test-project/app/node_modules/react-native-gesture-handler/dist/src/web/FlingGestureHandler.js"],"names":["FlingGestureHandler","Hammer","Swipe","event","sendEvent","eventType","INPUT_MOVE","isFinal","isFirst","isGestureRunning","hasGestureFailed","INPUT_END","ev","setTimeout","cancelEvent","gesture","hammer","get","name","options","enable","onStart","pointers","config","numberOfPointers","direction","getDirection","directions","Direction","RIGHT","push","DIRECTION_RIGHT","LEFT","DIRECTION_LEFT","UP","DIRECTION_UP","DOWN","DIRECTION_DOWN","getConfig","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","Set","length","DIRECTION_NONE","DIRECTION_ALL","_recognizer","pointerLength","maxPointers","validPointerCount","failed","success","props","GesturePropError","DraggingGestureHandler"],"mappings":"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","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { Direction } from './constants';\nimport { GesturePropError } from './Errors';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isnan } from './utils';\nclass FlingGestureHandler extends DraggingGestureHandler {\n    get name() {\n        return 'swipe';\n    }\n    get NativeGestureClass() {\n        return Hammer.Swipe;\n    }\n    onGestureActivated(event) {\n        this.sendEvent({\n            ...event,\n            eventType: Hammer.INPUT_MOVE,\n            isFinal: false,\n            isFirst: true,\n        });\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        this.sendEvent({\n            ...event,\n            eventType: Hammer.INPUT_END,\n            isFinal: true,\n        });\n    }\n    onRawEvent(ev) {\n        super.onRawEvent(ev);\n        if (this.hasGestureFailed) {\n            return;\n        }\n        // Hammer doesn't send a `cancel` event for taps.\n        // Manually fail the event.\n        if (ev.isFinal) {\n            setTimeout(() => {\n                if (this.isGestureRunning) {\n                    this.cancelEvent(ev);\n                }\n            });\n        }\n        else if (!this.hasGestureFailed && !this.isGestureRunning) {\n            // Tap Gesture start event\n            const gesture = this.hammer.get(this.name);\n            // @ts-ignore FIXME(TS)\n            if (gesture.options.enable(gesture, ev)) {\n                this.onStart(ev);\n                this.sendEvent(ev);\n            }\n        }\n    }\n    getHammerConfig() {\n        return {\n            // @ts-ignore FIXME(TS)\n            pointers: this.config.numberOfPointers,\n            direction: this.getDirection(),\n        };\n    }\n    getTargetDirections(direction) {\n        const directions = [];\n        if (direction & Direction.RIGHT) {\n            directions.push(Hammer.DIRECTION_RIGHT);\n        }\n        if (direction & Direction.LEFT) {\n            directions.push(Hammer.DIRECTION_LEFT);\n        }\n        if (direction & Direction.UP) {\n            directions.push(Hammer.DIRECTION_UP);\n        }\n        if (direction & Direction.DOWN) {\n            directions.push(Hammer.DIRECTION_DOWN);\n        }\n        // const hammerDirection = directions.reduce((a, b) => a | b, 0);\n        return directions;\n    }\n    getDirection() {\n        // @ts-ignore FIXME(TS)\n        const { direction } = this.getConfig();\n        let directions = [];\n        if (direction & Direction.RIGHT) {\n            directions.push(Hammer.DIRECTION_HORIZONTAL);\n        }\n        if (direction & Direction.LEFT) {\n            directions.push(Hammer.DIRECTION_HORIZONTAL);\n        }\n        if (direction & Direction.UP) {\n            directions.push(Hammer.DIRECTION_VERTICAL);\n        }\n        if (direction & Direction.DOWN) {\n            directions.push(Hammer.DIRECTION_VERTICAL);\n        }\n        directions = [...new Set(directions)];\n        if (directions.length === 0)\n            return Hammer.DIRECTION_NONE;\n        if (directions.length === 1)\n            return directions[0];\n        return Hammer.DIRECTION_ALL;\n    }\n    isGestureEnabledForEvent({ numberOfPointers }, _recognizer, { maxPointers: pointerLength }) {\n        const validPointerCount = pointerLength === numberOfPointers;\n        if (!validPointerCount && this.isGestureRunning) {\n            return { failed: true };\n        }\n        return { success: validPointerCount };\n    }\n    updateGestureConfig({ numberOfPointers = 1, direction, ...props }) {\n        if (isnan(direction) || typeof direction !== 'number') {\n            throw new GesturePropError('direction', direction, 'number');\n        }\n        return super.updateGestureConfig({\n            numberOfPointers,\n            direction,\n            ...props,\n        });\n    }\n}\nexport default FlingGestureHandler;\n"]},"metadata":{},"sourceType":"script"}
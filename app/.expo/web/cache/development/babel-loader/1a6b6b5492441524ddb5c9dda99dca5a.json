{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createHandler;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _areEqual = _interopRequireDefault(require(\"fbjs/lib/areEqual\"));\n\nvar _RNGestureHandlerModule = _interopRequireDefault(require(\"../RNGestureHandlerModule\"));\n\nvar _State = require(\"../State\");\n\nvar _stateToPropMappings;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction findNodeHandle(node) {\n  if (_reactNative.Platform.OS === 'web') return node;\n  return (0, _reactNative.findNodeHandle)(node);\n}\n\nvar _NativeModules$UIMana = _reactNative.NativeModules.UIManager,\n    UIManager = _NativeModules$UIMana === void 0 ? {} : _NativeModules$UIMana;\nvar customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nUIManager.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManager.genericDirectEventTypes), customGHEventsConfig);\n\nif (UIManager.getConstants) {\n  UIManager.getConstants().genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManager.getConstants().genericDirectEventTypes), customGHEventsConfig);\n}\n\nvar _UIManager$setJSRespo = UIManager.setJSResponder,\n    oldSetJSResponder = _UIManager$setJSRespo === void 0 ? function () {} : _UIManager$setJSRespo,\n    _UIManager$clearJSRes = UIManager.clearJSResponder,\n    oldClearJSResponder = _UIManager$clearJSRes === void 0 ? function () {} : _UIManager$clearJSRes;\n\nUIManager.setJSResponder = function (tag, blockNativeResponder) {\n  _RNGestureHandlerModule.default.handleSetJSResponder(tag, blockNativeResponder);\n\n  oldSetJSResponder(tag, blockNativeResponder);\n};\n\nUIManager.clearJSResponder = function () {\n  _RNGestureHandlerModule.default.handleClearJSResponder();\n\n  oldClearJSResponder();\n};\n\nvar handlerTag = 1;\nvar handlerIDToTag = {};\n\nfunction isConfigParam(param, name) {\n  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n}\n\nfunction filterConfig(props, validProps) {\n  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var res = _objectSpread({}, defaults);\n\n  validProps.forEach(function (key) {\n    var value = props[key];\n\n    if (isConfigParam(value, key)) {\n      var _value = props[key];\n\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        _value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof _value !== 'object') {\n          _value = {\n            top: _value,\n            left: _value,\n            bottom: _value,\n            right: _value\n          };\n        }\n      }\n\n      res[key] = _value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (_reactNative.Platform.OS === 'web') {\n    return handlerIDs.map(function (_ref) {\n      var current = _ref.current;\n      return current;\n    }).filter(function (handle) {\n      return handle;\n    });\n  }\n\n  return handlerIDs.map(function (handlerID) {\n    var _handlerID$current;\n\n    return handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) == null ? void 0 : _handlerID$current.handlerTag) || -1;\n  }).filter(function (handlerTag) {\n    return handlerTag > 0;\n  });\n}\n\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nvar stateToPropMappings = (_stateToPropMappings = {}, (0, _defineProperty2.default)(_stateToPropMappings, _State.State.UNDETERMINED, undefined), (0, _defineProperty2.default)(_stateToPropMappings, _State.State.BEGAN, 'onBegan'), (0, _defineProperty2.default)(_stateToPropMappings, _State.State.FAILED, 'onFailed'), (0, _defineProperty2.default)(_stateToPropMappings, _State.State.CANCELLED, 'onCancelled'), (0, _defineProperty2.default)(_stateToPropMappings, _State.State.ACTIVE, 'onActivated'), (0, _defineProperty2.default)(_stateToPropMappings, _State.State.END, 'onEnded'), _stateToPropMappings);\n\nfunction createHandler(_ref2) {\n  var name = _ref2.name,\n      _ref2$allowedProps = _ref2.allowedProps,\n      allowedProps = _ref2$allowedProps === void 0 ? [] : _ref2$allowedProps,\n      _ref2$config = _ref2.config,\n      config = _ref2$config === void 0 ? {} : _ref2$config,\n      transformProps = _ref2.transformProps,\n      _ref2$customNativePro = _ref2.customNativeProps,\n      customNativeProps = _ref2$customNativePro === void 0 ? [] : _ref2$customNativePro;\n\n  var Handler = function (_React$Component) {\n    (0, _inherits2.default)(Handler, _React$Component);\n\n    var _super = _createSuper(Handler);\n\n    function Handler(props) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, Handler);\n      _this = _super.call(this, props);\n      _this.updateEnqueued = null;\n\n      _this.onGestureHandlerEvent = function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          _this.props.onGestureEvent == null ? void 0 : _this.props.onGestureEvent(event);\n        } else {\n          _this.props.onGestureHandlerEvent == null ? void 0 : _this.props.onGestureHandlerEvent(event);\n        }\n      };\n\n      _this.onGestureHandlerStateChange = function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          _this.props.onHandlerStateChange == null ? void 0 : _this.props.onHandlerStateChange(event);\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          _this.props.onGestureHandlerStateChange == null ? void 0 : _this.props.onGestureHandlerStateChange(event);\n        }\n      };\n\n      _this.refHandler = function (node) {\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = child.ref;\n\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      };\n\n      _this.createGestureHandler = function (newConfig) {\n        _this.config = newConfig;\n\n        _RNGestureHandlerModule.default.createGestureHandler(name, _this.handlerTag, newConfig);\n      };\n\n      _this.attachGestureHandler = function (newViewTag) {\n        _this.viewTag = newViewTag;\n\n        if (_reactNative.Platform.OS === 'web') {\n          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag, _this.propsRef);\n        } else {\n          _RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag, newViewTag);\n        }\n      };\n\n      _this.updateGestureHandler = function (newConfig) {\n        _this.config = newConfig;\n\n        _RNGestureHandlerModule.default.updateGestureHandler(_this.handlerTag, newConfig);\n      };\n\n      _this.handlerTag = handlerTag++;\n      _this.config = {};\n      _this.propsRef = React.createRef();\n\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\" + props.id + \"\\\" already registered\");\n        }\n\n        handlerIDToTag[props.id] = _this.handlerTag;\n      }\n\n      return _this;\n    }\n\n    (0, _createClass2.default)(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        var props = this.props;\n\n        if (hasUnresolvedRefs(props)) {\n          this.updateEnqueued = setImmediate(function () {\n            _this2.updateEnqueued = null;\n\n            _this2.update();\n          });\n        }\n\n        this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config));\n        this.attachGestureHandler(findNodeHandle(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = findNodeHandle(this.viewNode);\n\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n\n        this.update();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        _RNGestureHandlerModule.default.dropGestureHandler(this.handlerTag);\n\n        if (this.updateEnqueued) {\n          clearImmediate(this.updateEnqueued);\n        }\n\n        var handlerID = this.props.id;\n\n        if (handlerID) {\n          delete handlerIDToTag[handlerID];\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config);\n\n        if (!(0, _areEqual.default)(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n\n        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [].concat((0, _toConsumableArray2.default)(allowedProps), (0, _toConsumableArray2.default)(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var gestureEventHandler = this.onGestureHandlerEvent;\n        var _this$props = this.props,\n            onGestureEvent = _this$props.onGestureEvent,\n            onGestureHandlerEvent = _this$props.onGestureHandlerEvent;\n\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n        var _this$props2 = this.props,\n            onHandlerStateChange = _this$props2.onHandlerStateChange,\n            onGestureHandlerStateChange = _this$props2.onGestureHandlerStateChange;\n\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n\n        var events = {\n          onGestureHandlerEvent: gestureEventHandler,\n          onGestureHandlerStateChange: gestureStateEventHandler\n        };\n        this.propsRef.current = events;\n        var child = React.Children.only(this.props.children);\n        var grandChildren = child.props.children;\n\n        if (_reactNative.Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(_reactNative.Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop\n          }));\n        }\n\n        return React.cloneElement(child, _objectSpread({\n          ref: this.refHandler,\n          collapsable: false\n        }, events), grandChildren);\n      }\n    }]);\n    return Handler;\n  }(React.Component);\n\n  Handler.displayName = name;\n  return Handler;\n}","map":{"version":3,"sources":["C:/Users/John Ray/Desktop/3jlc-test-project/app/node_modules/react-native-gesture-handler/dist/src/handlers/createHandler.js"],"names":["findNodeHandle","node","Platform","OS","NativeModules","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","RNGestureHandlerModule","handleSetJSResponder","handleClearJSResponder","handlerTag","handlerIDToTag","isConfigParam","param","name","undefined","Object","filterConfig","props","validProps","defaults","res","forEach","key","value","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","Array","isArray","map","current","filter","handle","handlerID","hasUnresolvedRefs","extract","refs","some","r","stateToPropMappings","State","UNDETERMINED","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","allowedProps","config","transformProps","customNativeProps","Handler","updateEnqueued","event","nativeEvent","onGestureEvent","onHandlerStateChange","state","stateEventName","eventHandler","refHandler","viewNode","child","React","Children","only","children","ref","createGestureHandler","newConfig","attachGestureHandler","newViewTag","viewTag","propsRef","updateGestureHandler","createRef","id","Error","setImmediate","update","dropGestureHandler","clearImmediate","updates","mergedProps","gestureEventHandler","gestureStateEventHandler","events","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","collapsable","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { findNodeHandle as findNodeHandleRN, NativeModules, Platform, Touchable, } from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nfunction findNodeHandle(node) {\n    if (Platform.OS === 'web')\n        return node;\n    return findNodeHandleRN(node);\n}\nconst { UIManager = {} } = NativeModules;\nconst customGHEventsConfig = {\n    onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n    onGestureHandlerStateChange: {\n        registrationName: 'onGestureHandlerStateChange',\n    },\n};\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManager.genericDirectEventTypes = {\n    ...UIManager.genericDirectEventTypes,\n    ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nif (UIManager.getConstants) {\n    UIManager.getConstants().genericDirectEventTypes = {\n        ...UIManager.getConstants().genericDirectEventTypes,\n        ...customGHEventsConfig,\n    };\n}\n// Wrap JS responder calls and notify gesture handler manager\nconst { setJSResponder: oldSetJSResponder = () => {\n    //no operation\n}, clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n}, } = UIManager;\nUIManager.setJSResponder = (tag, blockNativeResponder) => {\n    RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n    oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManager.clearJSResponder = () => {\n    RNGestureHandlerModule.handleClearJSResponder();\n    oldClearJSResponder();\n};\nlet handlerTag = 1;\nconst handlerIDToTag = {};\nfunction isConfigParam(param, name) {\n    // param !== Object(param) returns false if `param` is a function\n    // or an object and returns true if `param` is null\n    return (param !== undefined &&\n        (param !== Object(param) ||\n            !('__isNative' in param)) &&\n        name !== 'onHandlerStateChange' &&\n        name !== 'onGestureEvent');\n}\nfunction filterConfig(props, validProps, defaults = {}) {\n    const res = { ...defaults };\n    validProps.forEach((key) => {\n        const value = props[key];\n        if (isConfigParam(value, key)) {\n            let value = props[key];\n            if (key === 'simultaneousHandlers' || key === 'waitFor') {\n                value = transformIntoHandlerTags(props[key]);\n            }\n            else if (key === 'hitSlop') {\n                if (typeof value !== 'object') {\n                    value = { top: value, left: value, bottom: value, right: value };\n                }\n            }\n            res[key] = value;\n        }\n    });\n    return res;\n}\nfunction transformIntoHandlerTags(handlerIDs) {\n    if (!Array.isArray(handlerIDs)) {\n        handlerIDs = [handlerIDs];\n    }\n    if (Platform.OS === 'web') {\n        return handlerIDs\n            .map(({ current }) => current)\n            .filter((handle) => handle);\n    }\n    // converts handler string IDs into their numeric tags\n    return handlerIDs\n        .map((handlerID) => handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1)\n        .filter((handlerTag) => handlerTag > 0);\n}\nfunction hasUnresolvedRefs(props) {\n    // TODO(TS) - add type for extract arg\n    const extract = (refs) => {\n        if (!Array.isArray(refs)) {\n            return refs && refs.current === null;\n        }\n        return refs.some((r) => r && r.current === null);\n    };\n    return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\nconst stateToPropMappings = {\n    [State.UNDETERMINED]: undefined,\n    [State.BEGAN]: 'onBegan',\n    [State.FAILED]: 'onFailed',\n    [State.CANCELLED]: 'onCancelled',\n    [State.ACTIVE]: 'onActivated',\n    [State.END]: 'onEnded',\n};\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler({ name, allowedProps = [], config = {}, transformProps, customNativeProps = [], }) {\n    class Handler extends React.Component {\n        constructor(props) {\n            super(props);\n            this.updateEnqueued = null;\n            this.onGestureHandlerEvent = (event) => {\n                if (event.nativeEvent.handlerTag === this.handlerTag) {\n                    this.props.onGestureEvent?.(event);\n                }\n                else {\n                    this.props.onGestureHandlerEvent?.(event);\n                }\n            };\n            // TODO(TS) - make sure this is right type for event\n            this.onGestureHandlerStateChange = (event) => {\n                if (event.nativeEvent.handlerTag === this.handlerTag) {\n                    this.props.onHandlerStateChange?.(event);\n                    const state = event.nativeEvent.state;\n                    const stateEventName = stateToPropMappings[state];\n                    const eventHandler = stateEventName && this.props[stateEventName];\n                    if (eventHandler && typeof eventHandler === 'function') {\n                        eventHandler(event);\n                    }\n                }\n                else {\n                    this.props.onGestureHandlerStateChange?.(event);\n                }\n            };\n            this.refHandler = (node) => {\n                this.viewNode = node;\n                const child = React.Children.only(this.props.children);\n                // TODO(TS) fix ref type\n                const { ref } = child;\n                if (ref !== null) {\n                    if (typeof ref === 'function') {\n                        ref(node);\n                    }\n                    else {\n                        ref.current = node;\n                    }\n                }\n            };\n            this.createGestureHandler = (newConfig) => {\n                this.config = newConfig;\n                RNGestureHandlerModule.createGestureHandler(name, this.handlerTag, newConfig);\n            };\n            this.attachGestureHandler = (newViewTag) => {\n                this.viewTag = newViewTag;\n                if (Platform.OS === 'web') {\n                    // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n                    RNGestureHandlerModule.attachGestureHandler(this.handlerTag, newViewTag, this.propsRef);\n                }\n                else {\n                    RNGestureHandlerModule.attachGestureHandler(this.handlerTag, newViewTag);\n                }\n            };\n            this.updateGestureHandler = (newConfig) => {\n                this.config = newConfig;\n                RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n            };\n            this.handlerTag = handlerTag++;\n            this.config = {};\n            this.propsRef = React.createRef();\n            if (props.id) {\n                if (handlerIDToTag[props.id] !== undefined) {\n                    throw new Error(`Handler with ID \"${props.id}\" already registered`);\n                }\n                handlerIDToTag[props.id] = this.handlerTag;\n            }\n        }\n        componentDidMount() {\n            const props = this.props;\n            if (hasUnresolvedRefs(props)) {\n                // If there are unresolved refs (e.g. \".current\" has not yet been set)\n                // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n                // _update method that will try to update native handler props using\n                // setImmediate. This makes it so _update function gets called after all\n                // react components are mounted and we expect the missing ref object to\n                // be resolved by then.\n                this.updateEnqueued = setImmediate(() => {\n                    this.updateEnqueued = null;\n                    this.update();\n                });\n            }\n            this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [...allowedProps, ...customNativeProps], config));\n            this.attachGestureHandler(findNodeHandle(this.viewNode)); // TODO(TS) - check if this can be null\n        }\n        componentDidUpdate() {\n            const viewTag = findNodeHandle(this.viewNode);\n            if (this.viewTag !== viewTag) {\n                this.attachGestureHandler(viewTag); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n            }\n            this.update();\n        }\n        componentWillUnmount() {\n            RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n            if (this.updateEnqueued) {\n                clearImmediate(this.updateEnqueued);\n            }\n            // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n            const handlerID = this.props.id;\n            if (handlerID) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete handlerIDToTag[handlerID];\n            }\n        }\n        update() {\n            const newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [...allowedProps, ...customNativeProps], config);\n            if (!deepEqual(this.config, newConfig)) {\n                this.updateGestureHandler(newConfig);\n            }\n        }\n        setNativeProps(updates) {\n            const mergedProps = { ...this.props, ...updates };\n            const newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [...allowedProps, ...customNativeProps], config);\n            this.updateGestureHandler(newConfig);\n        }\n        render() {\n            let gestureEventHandler = this.onGestureHandlerEvent;\n            const { onGestureEvent, onGestureHandlerEvent, } = this.props;\n            if (onGestureEvent && typeof onGestureEvent !== 'function') {\n                // If it's not a method it should be an native Animated.event\n                // object. We set it directly as the handler for the view\n                // In this case nested handlers are not going to be supported\n                if (onGestureHandlerEvent) {\n                    throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n                }\n                gestureEventHandler = onGestureEvent;\n            }\n            else {\n                if (onGestureHandlerEvent &&\n                    typeof onGestureHandlerEvent !== 'function') {\n                    throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n                }\n            }\n            let gestureStateEventHandler = this.onGestureHandlerStateChange;\n            const { onHandlerStateChange, onGestureHandlerStateChange, } = this.props;\n            if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n                // If it's not a method it should be an native Animated.event\n                // object. We set it directly as the handler for the view\n                // In this case nested handlers are not going to be supported\n                if (onGestureHandlerStateChange) {\n                    throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n                }\n                gestureStateEventHandler = onHandlerStateChange;\n            }\n            else {\n                if (onGestureHandlerStateChange &&\n                    typeof onGestureHandlerStateChange !== 'function') {\n                    throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n                }\n            }\n            const events = {\n                onGestureHandlerEvent: gestureEventHandler,\n                onGestureHandlerStateChange: gestureStateEventHandler,\n            };\n            this.propsRef.current = events;\n            const child = React.Children.only(this.props.children);\n            let grandChildren = child.props.children;\n            if (Touchable.TOUCH_TARGET_DEBUG &&\n                child.type &&\n                (child.type === 'RNGestureHandlerButton' ||\n                    child.type.name === 'View' ||\n                    child.type.displayName === 'View')) {\n                grandChildren = React.Children.toArray(grandChildren);\n                grandChildren.push(Touchable.renderDebugView({\n                    color: 'mediumspringgreen',\n                    hitSlop: child.props.hitSlop,\n                }));\n            }\n            return React.cloneElement(child, {\n                ref: this.refHandler,\n                collapsable: false,\n                ...events,\n            }, grandChildren);\n        }\n    }\n    Handler.displayName = name;\n    return Handler;\n}\n"]},"metadata":{},"sourceType":"script"}
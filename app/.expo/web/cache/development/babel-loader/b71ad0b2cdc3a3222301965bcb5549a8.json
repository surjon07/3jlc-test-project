{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _hammerjs = _interopRequireDefault(require(\"@egjs/hammerjs\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _State = require(\"../State\");\n\nvar _constants = require(\"./constants\");\n\nvar NodeManager = _interopRequireWildcard(require(\"./NodeManager\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar gestureInstances = 0;\n\nvar GestureHandler = function () {\n  function GestureHandler() {\n    var _this = this;\n\n    (0, _classCallCheck2.default)(this, GestureHandler);\n    this.isGestureRunning = false;\n    this.view = null;\n    this.hasGestureFailed = false;\n    this.hammer = null;\n    this.initialRotation = null;\n    this.config = {};\n    this.previousState = _State.State.UNDETERMINED;\n    this.pendingGestures = {};\n    this.oldState = _State.State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.clearSelfAsPending = function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this.config.waitFor), _step; !(_step = _iterator()).done;) {\n          var gesture = _step.value;\n          gesture.removePendingGesture(_this.id);\n        }\n      }\n    };\n\n    this.destroy = function () {\n      _this.clearSelfAsPending();\n\n      if (_this.hammer) {\n        _this.hammer.stop(false);\n\n        _this.hammer.destroy();\n      }\n\n      _this.hammer = null;\n    };\n\n    this.isPointInView = function (_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n\n      var rect = _this.view.getBoundingClientRect();\n\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    };\n\n    this.sendEvent = function (nativeEvent) {\n      var _this$propsRef$curren = _this.propsRef.current,\n          onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n          onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n\n      var event = _this.transformEventData(nativeEvent);\n\n      invokeNullableMethod(onGestureHandlerEvent, event);\n\n      if (_this.lastSentState !== event.nativeEvent.state) {\n        _this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    };\n\n    this.sync = function () {\n      var gesture = _this.hammer.get(_this.name);\n\n      if (!gesture) return;\n\n      var enable = function enable(recognizer, inputData) {\n        if (!_this.config.enabled) {\n          _this.isGestureRunning = false;\n          _this.hasGestureFailed = false;\n          return false;\n        }\n\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return _this.shouldEnableGestureOnSetup;\n        }\n\n        if (_this.hasGestureFailed) {\n          return false;\n        }\n\n        if (!_this.isDiscrete) {\n          if (_this.isGestureRunning) {\n            return true;\n          }\n\n          _this._stillWaiting = _this._getPendingGestures();\n\n          if (_this._stillWaiting.length) {\n            for (var _iterator2 = _createForOfIteratorHelperLoose(_this._stillWaiting), _step2; !(_step2 = _iterator2()).done;) {\n              var _gesture2 = _step2.value;\n\n              if (!_gesture2.isDiscrete && _gesture2.isGestureRunning) {\n                _this.hasGestureFailed = true;\n                _this.isGestureRunning = false;\n                return false;\n              }\n            }\n\n            return false;\n          }\n        }\n\n        if (!_this.hasCustomActivationCriteria) {\n          return true;\n        }\n\n        var deltaRotation = _this.initialRotation == null ? 0 : inputData.rotation - _this.initialRotation;\n\n        var _this$isGestureEnable = _this.isGestureEnabledForEvent(_this.getConfig(), recognizer, _objectSpread(_objectSpread({}, inputData), {}, {\n          deltaRotation: deltaRotation\n        })),\n            success = _this$isGestureEnable.success,\n            failed = _this$isGestureEnable.failed;\n\n        if (failed) {\n          _this.simulateCancelEvent(inputData);\n\n          _this.hasGestureFailed = true;\n        }\n\n        return success;\n      };\n\n      var params = _this.getHammerConfig();\n\n      gesture.set(_objectSpread(_objectSpread({}, params), {}, {\n        enable: enable\n      }));\n    };\n\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  (0, _createClass2.default)(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return \"\" + this.name + this.gestureInstance;\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref2) {\n      var _ref2$enabled = _ref2.enabled,\n          enabled = _ref2$enabled === void 0 ? true : _ref2$enabled,\n          props = (0, _objectWithoutProperties2.default)(_ref2, [\"enabled\"]);\n      this.clearSelfAsPending();\n      this.config = ensureConfig(_objectSpread({\n        enabled: enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n\n      if (Array.isArray(this.config.waitFor)) {\n        for (var _iterator3 = _createForOfIteratorHelperLoose(this.config.waitFor), _step3; !(_step3 = _iterator3()).done;) {\n          var gesture = _step3.value;\n          gesture.addPendingGesture(this);\n        }\n      }\n\n      if (this.hammer) {\n        this.sync();\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      if (type == 0) {\n        return 0;\n      }\n\n      return _constants.EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      var eventType = event.eventType,\n          numberOfPointers = event.maxPointers;\n      var changedTouch = event.changedPointers[0];\n      var pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      var state = this.getState(eventType);\n\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n\n      return {\n        nativeEvent: _objectSpread(_objectSpread({\n          numberOfPointers: numberOfPointers,\n          state: state,\n          pointerInside: pointerInside\n        }, this.transformNativeEvent(event)), {}, {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: this.oldState\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (var _i = 0, _Object$values = Object.values(this.pendingGestures); _i < _Object$values.length; _i++) {\n        var gesture = _Object$values[_i];\n\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (var _i2 = 0, _Object$values2 = Object.values(this.pendingGestures); _i2 < _Object$values2.length; _i2++) {\n        var gesture = _Object$values2[_i2];\n\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: _hammerjs.default.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(_ref3) {\n      var isFirst = _ref3.isFirst;\n\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref, propsRef) {\n      var _this2 = this;\n\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.view = (0, _reactNative.findNodeHandle)(ref);\n      this.hammer = new _hammerjs.default.Manager(this.view);\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      var NativeGestureClass = this.NativeGestureClass;\n      var gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', function (ev) {\n        if (!_this2.config.enabled) {\n          _this2.hasGestureFailed = false;\n          _this2.isGestureRunning = false;\n          return;\n        }\n\n        _this2.onRawEvent(ev);\n\n        if (_this2.initialRotation === null && ev.rotation !== 0) {\n          _this2.initialRotation = ev.rotation;\n        }\n\n        if (ev.isFinal) {\n          setTimeout(function () {\n            _this2.initialRotation = null;\n            _this2.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this3 = this;\n\n      if (!this.isDiscrete) {\n        this.hammer.on(this.name + \"start\", function (event) {\n          return _this3.onStart(event);\n        });\n        this.hammer.on(this.name + \"end \" + this.name + \"cancel\", function (event) {\n          _this3.onGestureEnded(event);\n        });\n      }\n\n      this.hammer.on(this.name, function (ev) {\n        return _this3.onGestureActivated(ev);\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref4) {\n      var deltaX = _ref4.deltaX,\n          deltaY = _ref4.deltaY,\n          rotation = _ref4.rotation;\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        var stillWaiting = this.config.waitFor.filter(function (_ref5) {\n          var hasGestureFailed = _ref5.hasGestureFailed;\n          return hasGestureFailed === false;\n        });\n        return stillWaiting;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers: pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(_inputData) {}\n  }]);\n  return GestureHandler;\n}();\n\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var argMapping = method.__nodeConfig.argMapping;\n\n          if (Array.isArray(argMapping)) {\n            for (var index in argMapping) {\n              var _argMapping$index = (0, _slicedToArray2.default)(argMapping[index], 2),\n                  key = _argMapping$index[0],\n                  value = _argMapping$index[1];\n\n              if (key in event.nativeEvent) {\n                var nativeValue = event.nativeEvent[key];\n\n                if (value && value.setValue) {\n                  value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction ensureConfig(config) {\n  var props = _objectSpread({}, config);\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(function (_ref6) {\n      var handlerTag = _ref6.handlerTag;\n      return NodeManager.getHandler(handlerTag);\n    }).filter(function (v) {\n      return v;\n    });\n  } else {\n    props.waitFor = null;\n  }\n\n  var configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n  configProps.forEach(function (prop) {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nvar _default = GestureHandler;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/John Ray/Desktop/3jlc-test-project/app/node_modules/react-native-gesture-handler/dist/src/web/GestureHandler.js"],"names":["gestureInstances","GestureHandler","isGestureRunning","view","hasGestureFailed","hammer","initialRotation","config","previousState","State","UNDETERMINED","pendingGestures","oldState","lastSentState","clearSelfAsPending","Array","isArray","waitFor","gesture","removePendingGesture","id","destroy","stop","isPointInView","x","y","rect","getBoundingClientRect","pointerInside","left","right","top","bottom","sendEvent","nativeEvent","propsRef","current","onGestureHandlerEvent","onGestureHandlerStateChange","event","transformEventData","invokeNullableMethod","state","sync","get","name","enable","recognizer","inputData","enabled","options","maxPointers","shouldEnableGestureOnSetup","isDiscrete","_stillWaiting","_getPendingGestures","length","hasCustomActivationCriteria","deltaRotation","rotation","isGestureEnabledForEvent","getConfig","success","failed","simulateCancelEvent","params","getHammerConfig","set","gestureInstance","Error","_gesture","_config","_recognizer","_event","props","ensureConfig","updateHasCustomActivationCriteria","addPendingGesture","type","EventMap","eventType","numberOfPointers","changedTouch","changedPointers","clientX","clientY","getState","transformNativeEvent","handlerTag","target","ref","timeStamp","Date","now","Object","values","cancelEvent","onWaitingEnded","cancelPendingGestures","notifyPendingGestures","Hammer","INPUT_CANCEL","isFinal","onGestureEnded","isFirst","Manager","NativeGestureClass","add","on","ev","onRawEvent","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","stillWaiting","filter","pointers","minPointers","_inputData","method","__getHandler","handler","argMapping","__nodeConfig","index","key","value","nativeValue","setValue","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","NodeManager","getHandler","v","configProps","forEach","prop","Number","NaN"],"mappings":"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","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\nlet gestureInstances = 0;\nclass GestureHandler {\n    constructor() {\n        this.isGestureRunning = false;\n        this.view = null;\n        this.hasGestureFailed = false;\n        this.hammer = null;\n        this.initialRotation = null;\n        this.config = {};\n        this.previousState = State.UNDETERMINED;\n        this.pendingGestures = {};\n        this.oldState = State.UNDETERMINED;\n        this.lastSentState = null;\n        this.clearSelfAsPending = () => {\n            if (Array.isArray(this.config.waitFor)) {\n                for (const gesture of this.config.waitFor) {\n                    gesture.removePendingGesture(this.id);\n                }\n            }\n        };\n        this.destroy = () => {\n            this.clearSelfAsPending();\n            if (this.hammer) {\n                this.hammer.stop(false);\n                this.hammer.destroy();\n            }\n            this.hammer = null;\n        };\n        this.isPointInView = ({ x, y }) => {\n            // @ts-ignore FIXME(TS)\n            const rect = this.view.getBoundingClientRect();\n            const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n            return pointerInside;\n        };\n        this.sendEvent = (nativeEvent) => {\n            const { onGestureHandlerEvent, onGestureHandlerStateChange, } = this.propsRef.current;\n            const event = this.transformEventData(nativeEvent);\n            invokeNullableMethod(onGestureHandlerEvent, event);\n            if (this.lastSentState !== event.nativeEvent.state) {\n                this.lastSentState = event.nativeEvent.state;\n                invokeNullableMethod(onGestureHandlerStateChange, event);\n            }\n        };\n        this.sync = () => {\n            const gesture = this.hammer.get(this.name);\n            if (!gesture)\n                return;\n            const enable = (recognizer, inputData) => {\n                if (!this.config.enabled) {\n                    this.isGestureRunning = false;\n                    this.hasGestureFailed = false;\n                    return false;\n                }\n                // Prevent events before the system is ready.\n                if (!inputData ||\n                    !recognizer.options ||\n                    typeof inputData.maxPointers === 'undefined') {\n                    return this.shouldEnableGestureOnSetup;\n                }\n                if (this.hasGestureFailed) {\n                    return false;\n                }\n                if (!this.isDiscrete) {\n                    if (this.isGestureRunning) {\n                        return true;\n                    }\n                    // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n                    // Only process if there are views to wait for.\n                    this._stillWaiting = this._getPendingGestures();\n                    // This gesture should continue waiting.\n                    if (this._stillWaiting.length) {\n                        // Check to see if one of the gestures you're waiting for has started.\n                        // If it has then the gesture should fail.\n                        for (const gesture of this._stillWaiting) {\n                            // When the target gesture has started, this gesture must force fail.\n                            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                                this.hasGestureFailed = true;\n                                this.isGestureRunning = false;\n                                return false;\n                            }\n                        }\n                        // This gesture shouldn't start until the others have finished.\n                        return false;\n                    }\n                }\n                // Use default behaviour\n                if (!this.hasCustomActivationCriteria) {\n                    return true;\n                }\n                const deltaRotation = this.initialRotation == null\n                    ? 0\n                    : inputData.rotation - this.initialRotation;\n                // @ts-ignore FIXME(TS)\n                const { success, failed } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, {\n                    ...inputData,\n                    deltaRotation,\n                });\n                if (failed) {\n                    this.simulateCancelEvent(inputData);\n                    this.hasGestureFailed = true;\n                }\n                return success;\n            };\n            const params = this.getHammerConfig();\n            // @ts-ignore FIXME(TS)\n            gesture.set({ ...params, enable });\n        };\n        this.gestureInstance = gestureInstances++;\n        this.hasCustomActivationCriteria = false;\n    }\n    get id() {\n        return `${this.name}${this.gestureInstance}`;\n    }\n    get isDiscrete() {\n        return false;\n    }\n    get shouldEnableGestureOnSetup() {\n        throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n    getConfig() {\n        return this.config;\n    }\n    onWaitingEnded(_gesture) { }\n    removePendingGesture(id) {\n        delete this.pendingGestures[id];\n    }\n    addPendingGesture(gesture) {\n        this.pendingGestures[gesture.id] = gesture;\n    }\n    isGestureEnabledForEvent(_config, _recognizer, _event) {\n        return { success: true };\n    }\n    get NativeGestureClass() {\n        throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n    updateHasCustomActivationCriteria(_config) {\n        return true;\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        this.clearSelfAsPending();\n        this.config = ensureConfig({ enabled, ...props });\n        this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n        if (Array.isArray(this.config.waitFor)) {\n            for (const gesture of this.config.waitFor) {\n                gesture.addPendingGesture(this);\n            }\n        }\n        if (this.hammer) {\n            this.sync();\n        }\n        return this.config;\n    }\n    getState(type) {\n        // @ts-ignore TODO(TS) check if this is needed\n        if (type == 0) {\n            return 0;\n        }\n        return EventMap[type];\n    }\n    transformEventData(event) {\n        const { eventType, maxPointers: numberOfPointers } = event;\n        // const direction = DirectionMap[ev.direction];\n        const changedTouch = event.changedPointers[0];\n        const pointerInside = this.isPointInView({\n            x: changedTouch.clientX,\n            y: changedTouch.clientY,\n        });\n        // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n        const state = this.getState(eventType);\n        if (state !== this.previousState) {\n            this.oldState = this.previousState;\n            this.previousState = state;\n        }\n        return {\n            nativeEvent: {\n                numberOfPointers,\n                state,\n                pointerInside,\n                ...this.transformNativeEvent(event),\n                // onHandlerStateChange only\n                handlerTag: this.handlerTag,\n                target: this.ref,\n                oldState: this.oldState,\n            },\n            timeStamp: Date.now(),\n        };\n    }\n    transformNativeEvent(_event) {\n        return {};\n    }\n    cancelPendingGestures(event) {\n        for (const gesture of Object.values(this.pendingGestures)) {\n            if (gesture && gesture.isGestureRunning) {\n                gesture.hasGestureFailed = true;\n                gesture.cancelEvent(event);\n            }\n        }\n    }\n    notifyPendingGestures() {\n        for (const gesture of Object.values(this.pendingGestures)) {\n            if (gesture) {\n                gesture.onWaitingEnded(this);\n            }\n        }\n    }\n    // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n    onGestureEnded(event) {\n        this.isGestureRunning = false;\n        this.cancelPendingGestures(event);\n    }\n    forceInvalidate(event) {\n        if (this.isGestureRunning) {\n            this.hasGestureFailed = true;\n            this.cancelEvent(event);\n        }\n    }\n    cancelEvent(event) {\n        this.notifyPendingGestures();\n        this.sendEvent({\n            ...event,\n            eventType: Hammer.INPUT_CANCEL,\n            isFinal: true,\n        });\n        this.onGestureEnded(event);\n    }\n    onRawEvent({ isFirst }) {\n        if (isFirst) {\n            this.hasGestureFailed = false;\n        }\n    }\n    setView(ref, propsRef) {\n        if (ref == null) {\n            this.destroy();\n            this.view = null;\n            return;\n        }\n        this.propsRef = propsRef;\n        this.ref = ref;\n        this.view = findNodeHandle(ref);\n        this.hammer = new Hammer.Manager(this.view);\n        this.oldState = State.UNDETERMINED;\n        this.previousState = State.UNDETERMINED;\n        this.lastSentState = null;\n        const { NativeGestureClass } = this;\n        // @ts-ignore TODO(TS)\n        const gesture = new NativeGestureClass(this.getHammerConfig());\n        this.hammer.add(gesture);\n        this.hammer.on('hammer.input', (ev) => {\n            if (!this.config.enabled) {\n                this.hasGestureFailed = false;\n                this.isGestureRunning = false;\n                return;\n            }\n            this.onRawEvent(ev);\n            // TODO: Bacon: Check against something other than null\n            // The isFirst value is not called when the first rotation is calculated.\n            if (this.initialRotation === null && ev.rotation !== 0) {\n                this.initialRotation = ev.rotation;\n            }\n            if (ev.isFinal) {\n                // in favor of a willFail otherwise the last frame of the gesture will be captured.\n                setTimeout(() => {\n                    this.initialRotation = null;\n                    this.hasGestureFailed = false;\n                });\n            }\n        });\n        this.setupEvents();\n        this.sync();\n    }\n    setupEvents() {\n        // TODO(TS) Hammer types aren't exactly that what we get in runtime\n        if (!this.isDiscrete) {\n            this.hammer.on(`${this.name}start`, (event) => this.onStart(event));\n            this.hammer.on(`${this.name}end ${this.name}cancel`, (event) => {\n                this.onGestureEnded(event);\n            });\n        }\n        this.hammer.on(this.name, (ev) => this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n    }\n    onStart({ deltaX, deltaY, rotation }) {\n        // Reset the state for the next gesture\n        this.oldState = State.UNDETERMINED;\n        this.previousState = State.UNDETERMINED;\n        this.lastSentState = null;\n        this.isGestureRunning = true;\n        this.__initialX = deltaX;\n        this.__initialY = deltaY;\n        this.initialRotation = rotation;\n    }\n    onGestureActivated(ev) {\n        this.sendEvent(ev);\n    }\n    onSuccess() { }\n    _getPendingGestures() {\n        if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n            // Get the list of gestures that this gesture is still waiting for.\n            // Use `=== false` in case a ref that isn't a gesture handler is used.\n            const stillWaiting = this.config.waitFor.filter(({ hasGestureFailed }) => hasGestureFailed === false);\n            return stillWaiting;\n        }\n        return [];\n    }\n    getHammerConfig() {\n        const pointers = this.config.minPointers === this.config.maxPointers\n            ? this.config.minPointers\n            : 0;\n        return {\n            pointers,\n        };\n    }\n    simulateCancelEvent(_inputData) { }\n}\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(method, event) {\n    if (method) {\n        if (typeof method === 'function') {\n            method(event);\n        }\n        else {\n            // For use with reanimated's AnimatedEvent\n            if ('__getHandler' in method &&\n                typeof method.__getHandler === 'function') {\n                const handler = method.__getHandler();\n                invokeNullableMethod(handler, event);\n            }\n            else {\n                if ('__nodeConfig' in method) {\n                    const { argMapping } = method.__nodeConfig;\n                    if (Array.isArray(argMapping)) {\n                        for (const index in argMapping) {\n                            const [key, value] = argMapping[index];\n                            if (key in event.nativeEvent) {\n                                // @ts-ignore fix method type\n                                const nativeValue = event.nativeEvent[key];\n                                if (value && value.setValue) {\n                                    // Reanimated API\n                                    value.setValue(nativeValue);\n                                }\n                                else {\n                                    // RN Animated API\n                                    method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n// Validate the props\nfunction ensureConfig(config) {\n    const props = { ...config };\n    // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n    if ('minDist' in config) {\n        props.minDist = config.minDist;\n        props.minDistSq = props.minDist * props.minDist;\n    }\n    if ('minVelocity' in config) {\n        props.minVelocity = config.minVelocity;\n        props.minVelocitySq = props.minVelocity * props.minVelocity;\n    }\n    if ('maxDist' in config) {\n        props.maxDist = config.maxDist;\n        props.maxDistSq = config.maxDist * config.maxDist;\n    }\n    if ('waitFor' in config) {\n        props.waitFor = asArray(config.waitFor)\n            .map(({ handlerTag }) => NodeManager.getHandler(handlerTag))\n            .filter(v => v);\n    }\n    else {\n        props.waitFor = null;\n    }\n    const configProps = [\n        'minPointers',\n        'maxPointers',\n        'minDist',\n        'maxDist',\n        'maxDistSq',\n        'minVelocitySq',\n        'minDistSq',\n        'minVelocity',\n        'failOffsetXStart',\n        'failOffsetYStart',\n        'failOffsetXEnd',\n        'failOffsetYEnd',\n        'activeOffsetXStart',\n        'activeOffsetXEnd',\n        'activeOffsetYStart',\n        'activeOffsetYEnd',\n    ];\n    configProps.forEach((prop) => {\n        if (typeof props[prop] === 'undefined') {\n            props[prop] = Number.NaN;\n        }\n    });\n    return props; // TODO(TS) how to convince TS that props are filled?\n}\nfunction asArray(value) {\n    // TODO(TS) use config.waitFor type\n    return value == null ? [] : Array.isArray(value) ? value : [value];\n}\nexport default GestureHandler;\n"]},"metadata":{},"sourceType":"script"}
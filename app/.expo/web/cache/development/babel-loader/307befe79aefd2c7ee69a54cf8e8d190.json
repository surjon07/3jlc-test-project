{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Gestures = void 0;\n\nvar _constants = require(\"./web/constants\");\n\nvar _FlingGestureHandler = _interopRequireDefault(require(\"./web/FlingGestureHandler\"));\n\nvar _LongPressGestureHandler = _interopRequireDefault(require(\"./web/LongPressGestureHandler\"));\n\nvar _NativeViewGestureHandler = _interopRequireDefault(require(\"./web/NativeViewGestureHandler\"));\n\nvar NodeManager = _interopRequireWildcard(require(\"./web/NodeManager\"));\n\nvar _PanGestureHandler = _interopRequireDefault(require(\"./web/PanGestureHandler\"));\n\nvar _PinchGestureHandler = _interopRequireDefault(require(\"./web/PinchGestureHandler\"));\n\nvar _RotationGestureHandler = _interopRequireDefault(require(\"./web/RotationGestureHandler\"));\n\nvar _TapGestureHandler = _interopRequireDefault(require(\"./web/TapGestureHandler\"));\n\nvar Gestures = {\n  PanGestureHandler: _PanGestureHandler.default,\n  RotationGestureHandler: _RotationGestureHandler.default,\n  PinchGestureHandler: _PinchGestureHandler.default,\n  TapGestureHandler: _TapGestureHandler.default,\n  NativeViewGestureHandler: _NativeViewGestureHandler.default,\n  LongPressGestureHandler: _LongPressGestureHandler.default,\n  FlingGestureHandler: _FlingGestureHandler.default\n};\nexports.Gestures = Gestures;\nvar _default = {\n  Direction: _constants.Direction,\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (!(handlerName in Gestures)) throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n    var GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, propsRef) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    NodeManager.dropGestureHandler(handlerTag);\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/John Ray/Desktop/3jlc-test-project/app/node_modules/react-native-gesture-handler/dist/src/RNGestureHandlerModule.web.js"],"names":["Gestures","PanGestureHandler","RotationGestureHandler","PinchGestureHandler","TapGestureHandler","NativeViewGestureHandler","LongPressGestureHandler","FlingGestureHandler","Direction","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","NodeManager","updateGestureHandler","attachGestureHandler","newView","propsRef","getHandler","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACO,IAAMA,QAAQ,GAAG;AACpBC,EAAAA,iBAAiB,EAAjBA,0BADoB;AAEpBC,EAAAA,sBAAsB,EAAtBA,+BAFoB;AAGpBC,EAAAA,mBAAmB,EAAnBA,4BAHoB;AAIpBC,EAAAA,iBAAiB,EAAjBA,0BAJoB;AAKpBC,EAAAA,wBAAwB,EAAxBA,iCALoB;AAMpBC,EAAAA,uBAAuB,EAAvBA,gCANoB;AAOpBC,EAAAA,mBAAmB,EAAnBA;AAPoB,CAAjB;;eASQ;AACXC,EAAAA,SAAS,EAATA,oBADW;AAEXC,EAAAA,oBAFW,gCAEUC,GAFV,EAEeC,oBAFf,EAEqC;AAC5CC,IAAAA,OAAO,CAACC,IAAR,CAAa,wBAAb,EAAuCH,GAAvC,EAA4CC,oBAA5C;AACH,GAJU;AAKXG,EAAAA,sBALW,oCAKc;AACrBF,IAAAA,OAAO,CAACC,IAAR,CAAa,0BAAb;AACH,GAPU;AAQXE,EAAAA,oBARW,gCAQUC,WARV,EAQuBC,UARvB,EAQmCC,MARnC,EAQ2C;AAElD,QAAI,EAAEF,WAAW,IAAIhB,QAAjB,CAAJ,EACI,MAAM,IAAImB,KAAJ,oCAA2CH,WAA3C,+BAAN;AACJ,QAAMI,YAAY,GAAGpB,QAAQ,CAACgB,WAAD,CAA7B;AACAK,IAAAA,WAAW,CAACN,oBAAZ,CAAiCE,UAAjC,EAA6C,IAAIG,YAAJ,EAA7C;AACA,SAAKE,oBAAL,CAA0BL,UAA1B,EAAsCC,MAAtC;AACH,GAfU;AAgBXK,EAAAA,oBAhBW,gCAgBUN,UAhBV,EAgBsBO,OAhBtB,EAgB+BC,QAhB/B,EAgByC;AAChDJ,IAAAA,WAAW,CAACK,UAAZ,CAAuBT,UAAvB,EAAmCU,OAAnC,CAA2CH,OAA3C,EAAoDC,QAApD;AACH,GAlBU;AAmBXH,EAAAA,oBAnBW,gCAmBUL,UAnBV,EAmBsBW,SAnBtB,EAmBiC;AACxCP,IAAAA,WAAW,CAACK,UAAZ,CAAuBT,UAAvB,EAAmCY,mBAAnC,CAAuDD,SAAvD;AACH,GArBU;AAsBXE,EAAAA,qBAtBW,iCAsBWb,UAtBX,EAsBuB;AAC9B,WAAOI,WAAW,CAACK,UAAZ,CAAuBT,UAAvB,CAAP;AACH,GAxBU;AAyBXc,EAAAA,kBAzBW,8BAyBQd,UAzBR,EAyBoB;AAC3BI,IAAAA,WAAW,CAACU,kBAAZ,CAA+Bd,UAA/B;AACH;AA3BU,C","sourcesContent":["import { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\nexport const Gestures = {\n    PanGestureHandler,\n    RotationGestureHandler,\n    PinchGestureHandler,\n    TapGestureHandler,\n    NativeViewGestureHandler,\n    LongPressGestureHandler,\n    FlingGestureHandler,\n};\nexport default {\n    Direction,\n    handleSetJSResponder(tag, blockNativeResponder) {\n        console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n    },\n    handleClearJSResponder() {\n        console.warn('handleClearJSResponder: ');\n    },\n    createGestureHandler(handlerName, handlerTag, config) {\n        //TODO(TS) extends config\n        if (!(handlerName in Gestures))\n            throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n        const GestureClass = Gestures[handlerName];\n        NodeManager.createGestureHandler(handlerTag, new GestureClass());\n        this.updateGestureHandler(handlerTag, config);\n    },\n    attachGestureHandler(handlerTag, newView, propsRef) {\n        NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    },\n    updateGestureHandler(handlerTag, newConfig) {\n        NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    },\n    getGestureHandlerNode(handlerTag) {\n        return NodeManager.getHandler(handlerTag);\n    },\n    dropGestureHandler(handlerTag) {\n        NodeManager.dropGestureHandler(handlerTag);\n    },\n};\n"]},"metadata":{},"sourceType":"script"}